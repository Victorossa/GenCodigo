'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
'     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class DBModel
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=DBModel")
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property ArchivoReplace() As DbSet(Of ArchivoReplace)
    Public Overridable Property CampoComponentes() As DbSet(Of CampoComponentes)
    Public Overridable Property CamposDeTablas() As DbSet(Of CamposDeTablas)
    Public Overridable Property Componentes() As DbSet(Of Componentes)
    Public Overridable Property Plantillas() As DbSet(Of Plantillas)
    Public Overridable Property Producto() As DbSet(Of Producto)
    Public Overridable Property Proyectos() As DbSet(Of Proyectos)
    Public Overridable Property ProyectosYTecnologias() As DbSet(Of ProyectosYTecnologias)
    Public Overridable Property RegistroValorRequerimientos() As DbSet(Of RegistroValorRequerimientos)
    Public Overridable Property RequerimientosPlantillas() As DbSet(Of RequerimientosPlantillas)
    Public Overridable Property TablasDeProyecto() As DbSet(Of TablasDeProyecto)
    Public Overridable Property Tecnologias() As DbSet(Of Tecnologias)
    Public Overridable Property TiposDeCampos() As DbSet(Of TiposDeCampos)
    Public Overridable Property TablasRelacionadas() As DbSet(Of TablasRelacionadas)
    Public Overridable Property View_ProyectosYTecnologias() As DbSet(Of View_ProyectosYTecnologias)

    Public Overridable Function ELIMINA_SEGUN_PROYECTO(proyectoID As Nullable(Of Integer), tecnologiaID As Nullable(Of Integer)) As Integer
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Dim tecnologiaIDParameter As ObjectParameter = If(tecnologiaID.HasValue, New ObjectParameter("TecnologiaID", tecnologiaID), New ObjectParameter("TecnologiaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ELIMINA_SEGUN_PROYECTO", proyectoIDParameter, tecnologiaIDParameter)
    End Function

    Public Overridable Function SP_ArchivoReplace_EDICION_INSERTAR(archivoReplace As String) As Integer
        Dim archivoReplaceParameter As ObjectParameter = If(archivoReplace IsNot Nothing, New ObjectParameter("ArchivoReplace", archivoReplace), New ObjectParameter("ArchivoReplace", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_ArchivoReplace_EDICION_INSERTAR", archivoReplaceParameter)
    End Function

    Public Overridable Function SP_CampoComponentes_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID(plantillaID As Nullable(Of Integer)) As ObjectResult(Of SP_CampoComponentes_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID_Result)
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_CampoComponentes_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID_Result)("SP_CampoComponentes_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID", plantillaIDParameter)
    End Function

    Public Overridable Function SP_CampoComponentes_EDICION_ACTUALIZAR(campoComponenteID As Nullable(Of Integer), plantillaID As Nullable(Of Integer), tipo As String, prefijo As String, superior As String, sufijo As String, inferior As String, separadorCampos As String, multiReplace As String) As Integer
        Dim campoComponenteIDParameter As ObjectParameter = If(campoComponenteID.HasValue, New ObjectParameter("CampoComponenteID", campoComponenteID), New ObjectParameter("CampoComponenteID", GetType(Integer)))

        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Dim tipoParameter As ObjectParameter = If(tipo IsNot Nothing, New ObjectParameter("Tipo", tipo), New ObjectParameter("Tipo", GetType(String)))

        Dim prefijoParameter As ObjectParameter = If(prefijo IsNot Nothing, New ObjectParameter("Prefijo", prefijo), New ObjectParameter("Prefijo", GetType(String)))

        Dim superiorParameter As ObjectParameter = If(superior IsNot Nothing, New ObjectParameter("Superior", superior), New ObjectParameter("Superior", GetType(String)))

        Dim sufijoParameter As ObjectParameter = If(sufijo IsNot Nothing, New ObjectParameter("Sufijo", sufijo), New ObjectParameter("Sufijo", GetType(String)))

        Dim inferiorParameter As ObjectParameter = If(inferior IsNot Nothing, New ObjectParameter("Inferior", inferior), New ObjectParameter("Inferior", GetType(String)))

        Dim separadorCamposParameter As ObjectParameter = If(separadorCampos IsNot Nothing, New ObjectParameter("SeparadorCampos", separadorCampos), New ObjectParameter("SeparadorCampos", GetType(String)))

        Dim multiReplaceParameter As ObjectParameter = If(multiReplace IsNot Nothing, New ObjectParameter("MultiReplace", multiReplace), New ObjectParameter("MultiReplace", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_CampoComponentes_EDICION_ACTUALIZAR", campoComponenteIDParameter, plantillaIDParameter, tipoParameter, prefijoParameter, superiorParameter, sufijoParameter, inferiorParameter, separadorCamposParameter, multiReplaceParameter)
    End Function

    Public Overridable Function SP_CampoComponentes_EDICION_ELIMINAR(campoComponenteID As Nullable(Of Integer)) As Integer
        Dim campoComponenteIDParameter As ObjectParameter = If(campoComponenteID.HasValue, New ObjectParameter("CampoComponenteID", campoComponenteID), New ObjectParameter("CampoComponenteID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_CampoComponentes_EDICION_ELIMINAR", campoComponenteIDParameter)
    End Function

    Public Overridable Function SP_CampoComponentes_EDICION_INSERTAR(plantillaID As Nullable(Of Integer), tipo As String, prefijo As String, superior As String, sufijo As String, inferior As String, separadorCampos As String, multiReplace As String) As Integer
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Dim tipoParameter As ObjectParameter = If(tipo IsNot Nothing, New ObjectParameter("Tipo", tipo), New ObjectParameter("Tipo", GetType(String)))

        Dim prefijoParameter As ObjectParameter = If(prefijo IsNot Nothing, New ObjectParameter("Prefijo", prefijo), New ObjectParameter("Prefijo", GetType(String)))

        Dim superiorParameter As ObjectParameter = If(superior IsNot Nothing, New ObjectParameter("Superior", superior), New ObjectParameter("Superior", GetType(String)))

        Dim sufijoParameter As ObjectParameter = If(sufijo IsNot Nothing, New ObjectParameter("Sufijo", sufijo), New ObjectParameter("Sufijo", GetType(String)))

        Dim inferiorParameter As ObjectParameter = If(inferior IsNot Nothing, New ObjectParameter("Inferior", inferior), New ObjectParameter("Inferior", GetType(String)))

        Dim separadorCamposParameter As ObjectParameter = If(separadorCampos IsNot Nothing, New ObjectParameter("SeparadorCampos", separadorCampos), New ObjectParameter("SeparadorCampos", GetType(String)))

        Dim multiReplaceParameter As ObjectParameter = If(multiReplace IsNot Nothing, New ObjectParameter("MultiReplace", multiReplace), New ObjectParameter("MultiReplace", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_CampoComponentes_EDICION_INSERTAR", plantillaIDParameter, tipoParameter, prefijoParameter, superiorParameter, sufijoParameter, inferiorParameter, separadorCamposParameter, multiReplaceParameter)
    End Function

    Public Overridable Function SP_CampoComponentes_Segun_Plantilla_Tipo(plantillaID As Nullable(Of Integer), tipo As String) As ObjectResult(Of SP_CampoComponentes_Segun_Plantilla_Tipo_Result)
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Dim tipoParameter As ObjectParameter = If(tipo IsNot Nothing, New ObjectParameter("Tipo", tipo), New ObjectParameter("Tipo", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_CampoComponentes_Segun_Plantilla_Tipo_Result)("SP_CampoComponentes_Segun_Plantilla_Tipo", plantillaIDParameter, tipoParameter)
    End Function

    Public Overridable Function SP_CamposDeTablas_BUSQUEDA_SEGUN_PARAMETRO_TablaID(tablaID As Nullable(Of Integer)) As ObjectResult(Of SP_CamposDeTablas_BUSQUEDA_SEGUN_PARAMETRO_TablaID_Result)
        Dim tablaIDParameter As ObjectParameter = If(tablaID.HasValue, New ObjectParameter("TablaID", tablaID), New ObjectParameter("TablaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_CamposDeTablas_BUSQUEDA_SEGUN_PARAMETRO_TablaID_Result)("SP_CamposDeTablas_BUSQUEDA_SEGUN_PARAMETRO_TablaID", tablaIDParameter)
    End Function

    Public Overridable Function SP_CamposDeTablas_EDICION_ACTUALIZAR(campoID As Nullable(Of Integer), tablaID As Nullable(Of Integer), tipo As String, nombreCampo As String) As Integer
        Dim campoIDParameter As ObjectParameter = If(campoID.HasValue, New ObjectParameter("CampoID", campoID), New ObjectParameter("CampoID", GetType(Integer)))

        Dim tablaIDParameter As ObjectParameter = If(tablaID.HasValue, New ObjectParameter("TablaID", tablaID), New ObjectParameter("TablaID", GetType(Integer)))

        Dim tipoParameter As ObjectParameter = If(tipo IsNot Nothing, New ObjectParameter("Tipo", tipo), New ObjectParameter("Tipo", GetType(String)))

        Dim nombreCampoParameter As ObjectParameter = If(nombreCampo IsNot Nothing, New ObjectParameter("NombreCampo", nombreCampo), New ObjectParameter("NombreCampo", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_CamposDeTablas_EDICION_ACTUALIZAR", campoIDParameter, tablaIDParameter, tipoParameter, nombreCampoParameter)
    End Function

    Public Overridable Function SP_CamposDeTablas_EDICION_ELIMINAR(campoID As Nullable(Of Integer)) As Integer
        Dim campoIDParameter As ObjectParameter = If(campoID.HasValue, New ObjectParameter("CampoID", campoID), New ObjectParameter("CampoID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_CamposDeTablas_EDICION_ELIMINAR", campoIDParameter)
    End Function

    Public Overridable Function SP_CamposDeTablas_EDICION_INSERTAR(tablaID As Nullable(Of Integer), tipo As String, nombreCampo As String) As Integer
        Dim tablaIDParameter As ObjectParameter = If(tablaID.HasValue, New ObjectParameter("TablaID", tablaID), New ObjectParameter("TablaID", GetType(Integer)))

        Dim tipoParameter As ObjectParameter = If(tipo IsNot Nothing, New ObjectParameter("Tipo", tipo), New ObjectParameter("Tipo", GetType(String)))

        Dim nombreCampoParameter As ObjectParameter = If(nombreCampo IsNot Nothing, New ObjectParameter("NombreCampo", nombreCampo), New ObjectParameter("NombreCampo", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_CamposDeTablas_EDICION_INSERTAR", tablaIDParameter, tipoParameter, nombreCampoParameter)
    End Function

    Public Overridable Function SP_CARGA_CONVENSIONES_USADAS() As ObjectResult(Of String)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("SP_CARGA_CONVENSIONES_USADAS")
    End Function

    Public Overridable Function SP_CARGA_TECNOLOGIAS_APLICADAS_A_PROYECTO(proyectoID As Nullable(Of Integer)) As ObjectResult(Of SP_CARGA_TECNOLOGIAS_APLICADAS_A_PROYECTO_Result)
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_CARGA_TECNOLOGIAS_APLICADAS_A_PROYECTO_Result)("SP_CARGA_TECNOLOGIAS_APLICADAS_A_PROYECTO", proyectoIDParameter)
    End Function

    Public Overridable Function SP_Componentes_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID(plantillaID As Nullable(Of Integer)) As ObjectResult(Of SP_Componentes_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID_Result)
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_Componentes_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID_Result)("SP_Componentes_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID", plantillaIDParameter)
    End Function

    Public Overridable Function SP_Componentes_EDICION_ACTUALIZAR(componenteID As Nullable(Of Integer), plantillaID As Nullable(Of Integer), nombreComponente As String, codigo As String, xTabla As Nullable(Of Boolean)) As Integer
        Dim componenteIDParameter As ObjectParameter = If(componenteID.HasValue, New ObjectParameter("ComponenteID", componenteID), New ObjectParameter("ComponenteID", GetType(Integer)))

        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Dim nombreComponenteParameter As ObjectParameter = If(nombreComponente IsNot Nothing, New ObjectParameter("NombreComponente", nombreComponente), New ObjectParameter("NombreComponente", GetType(String)))

        Dim codigoParameter As ObjectParameter = If(codigo IsNot Nothing, New ObjectParameter("Codigo", codigo), New ObjectParameter("Codigo", GetType(String)))

        Dim xTablaParameter As ObjectParameter = If(xTabla.HasValue, New ObjectParameter("XTabla", xTabla), New ObjectParameter("XTabla", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Componentes_EDICION_ACTUALIZAR", componenteIDParameter, plantillaIDParameter, nombreComponenteParameter, codigoParameter, xTablaParameter)
    End Function

    Public Overridable Function SP_Componentes_EDICION_ELIMINAR(componenteID As Nullable(Of Integer)) As Integer
        Dim componenteIDParameter As ObjectParameter = If(componenteID.HasValue, New ObjectParameter("ComponenteID", componenteID), New ObjectParameter("ComponenteID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Componentes_EDICION_ELIMINAR", componenteIDParameter)
    End Function

    Public Overridable Function SP_Componentes_EDICION_INSERTAR(plantillaID As Nullable(Of Integer), nombreComponente As String, codigo As String, xTabla As Nullable(Of Boolean)) As Integer
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Dim nombreComponenteParameter As ObjectParameter = If(nombreComponente IsNot Nothing, New ObjectParameter("NombreComponente", nombreComponente), New ObjectParameter("NombreComponente", GetType(String)))

        Dim codigoParameter As ObjectParameter = If(codigo IsNot Nothing, New ObjectParameter("Codigo", codigo), New ObjectParameter("Codigo", GetType(String)))

        Dim xTablaParameter As ObjectParameter = If(xTabla.HasValue, New ObjectParameter("XTabla", xTabla), New ObjectParameter("XTabla", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Componentes_EDICION_INSERTAR", plantillaIDParameter, nombreComponenteParameter, codigoParameter, xTablaParameter)
    End Function

    Public Overridable Function SP_ELIMINA_RegistroValorRequerimientos_SegunID(proyectoID As Nullable(Of Integer)) As Integer
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_ELIMINA_RegistroValorRequerimientos_SegunID", proyectoIDParameter)
    End Function

    Public Overridable Function SP_GruposDeTiposDeDatos_BUSQUEDA_SEGUN_PARAMETRO_GrupoTiposID(grupoTiposID As Nullable(Of Integer)) As Integer
        Dim grupoTiposIDParameter As ObjectParameter = If(grupoTiposID.HasValue, New ObjectParameter("GrupoTiposID", grupoTiposID), New ObjectParameter("GrupoTiposID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_GruposDeTiposDeDatos_BUSQUEDA_SEGUN_PARAMETRO_GrupoTiposID", grupoTiposIDParameter)
    End Function

    Public Overridable Function SP_GruposDeTiposDeDatos_EDICION_ACTUALIZAR(grupoTiposID As Nullable(Of Integer), nombreGrupoTipoDeDato As String) As Integer
        Dim grupoTiposIDParameter As ObjectParameter = If(grupoTiposID.HasValue, New ObjectParameter("GrupoTiposID", grupoTiposID), New ObjectParameter("GrupoTiposID", GetType(Integer)))

        Dim nombreGrupoTipoDeDatoParameter As ObjectParameter = If(nombreGrupoTipoDeDato IsNot Nothing, New ObjectParameter("NombreGrupoTipoDeDato", nombreGrupoTipoDeDato), New ObjectParameter("NombreGrupoTipoDeDato", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_GruposDeTiposDeDatos_EDICION_ACTUALIZAR", grupoTiposIDParameter, nombreGrupoTipoDeDatoParameter)
    End Function

    Public Overridable Function SP_GruposDeTiposDeDatos_EDICION_ELIMINAR(grupoTiposID As Nullable(Of Integer)) As Integer
        Dim grupoTiposIDParameter As ObjectParameter = If(grupoTiposID.HasValue, New ObjectParameter("GrupoTiposID", grupoTiposID), New ObjectParameter("GrupoTiposID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_GruposDeTiposDeDatos_EDICION_ELIMINAR", grupoTiposIDParameter)
    End Function

    Public Overridable Function SP_GruposDeTiposDeDatos_EDICION_INSERTAR(nombreGrupoTipoDeDato As String) As Integer
        Dim nombreGrupoTipoDeDatoParameter As ObjectParameter = If(nombreGrupoTipoDeDato IsNot Nothing, New ObjectParameter("NombreGrupoTipoDeDato", nombreGrupoTipoDeDato), New ObjectParameter("NombreGrupoTipoDeDato", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_GruposDeTiposDeDatos_EDICION_INSERTAR", nombreGrupoTipoDeDatoParameter)
    End Function

    Public Overridable Function SP_Plantillas_BUSQUEDA_SEGUN_PARAMETRO_Tecnologia(tecnologiaID As Nullable(Of Integer)) As ObjectResult(Of SP_Plantillas_BUSQUEDA_SEGUN_PARAMETRO_Tecnologia_Result)
        Dim tecnologiaIDParameter As ObjectParameter = If(tecnologiaID.HasValue, New ObjectParameter("TecnologiaID", tecnologiaID), New ObjectParameter("TecnologiaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_Plantillas_BUSQUEDA_SEGUN_PARAMETRO_Tecnologia_Result)("SP_Plantillas_BUSQUEDA_SEGUN_PARAMETRO_Tecnologia", tecnologiaIDParameter)
    End Function

    Public Overridable Function SP_Plantillas_EDICION_ACTUALIZAR(plantillaID As Nullable(Of Integer), tecnologiaID As Nullable(Of Integer), nombrePlantilla As String, orden As Nullable(Of Integer)) As Integer
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Dim tecnologiaIDParameter As ObjectParameter = If(tecnologiaID.HasValue, New ObjectParameter("TecnologiaID", tecnologiaID), New ObjectParameter("TecnologiaID", GetType(Integer)))

        Dim nombrePlantillaParameter As ObjectParameter = If(nombrePlantilla IsNot Nothing, New ObjectParameter("NombrePlantilla", nombrePlantilla), New ObjectParameter("NombrePlantilla", GetType(String)))

        Dim ordenParameter As ObjectParameter = If(orden.HasValue, New ObjectParameter("Orden", orden), New ObjectParameter("Orden", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Plantillas_EDICION_ACTUALIZAR", plantillaIDParameter, tecnologiaIDParameter, nombrePlantillaParameter, ordenParameter)
    End Function

    Public Overridable Function SP_Plantillas_EDICION_ELIMINAR(plantillaID As Nullable(Of Integer)) As Integer
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Plantillas_EDICION_ELIMINAR", plantillaIDParameter)
    End Function

    Public Overridable Function SP_Plantillas_EDICION_INSERTAR(tecnologiaID As Nullable(Of Integer), nombrePlantilla As String, orden As Nullable(Of Integer)) As Integer
        Dim tecnologiaIDParameter As ObjectParameter = If(tecnologiaID.HasValue, New ObjectParameter("TecnologiaID", tecnologiaID), New ObjectParameter("TecnologiaID", GetType(Integer)))

        Dim nombrePlantillaParameter As ObjectParameter = If(nombrePlantilla IsNot Nothing, New ObjectParameter("NombrePlantilla", nombrePlantilla), New ObjectParameter("NombrePlantilla", GetType(String)))

        Dim ordenParameter As ObjectParameter = If(orden.HasValue, New ObjectParameter("Orden", orden), New ObjectParameter("Orden", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Plantillas_EDICION_INSERTAR", tecnologiaIDParameter, nombrePlantillaParameter, ordenParameter)
    End Function

    Public Overridable Function SP_Proyectos_EDICION_ACTUALIZAR(proyectoID As Nullable(Of Integer), nombreProyecto As String, codigoGenerado As String, descripcion As String) As Integer
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Dim nombreProyectoParameter As ObjectParameter = If(nombreProyecto IsNot Nothing, New ObjectParameter("NombreProyecto", nombreProyecto), New ObjectParameter("NombreProyecto", GetType(String)))

        Dim codigoGeneradoParameter As ObjectParameter = If(codigoGenerado IsNot Nothing, New ObjectParameter("CodigoGenerado", codigoGenerado), New ObjectParameter("CodigoGenerado", GetType(String)))

        Dim descripcionParameter As ObjectParameter = If(descripcion IsNot Nothing, New ObjectParameter("Descripcion", descripcion), New ObjectParameter("Descripcion", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Proyectos_EDICION_ACTUALIZAR", proyectoIDParameter, nombreProyectoParameter, codigoGeneradoParameter, descripcionParameter)
    End Function

    Public Overridable Function SP_Proyectos_EDICION_ELIMINAR(proyectoID As Nullable(Of Integer)) As Integer
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Proyectos_EDICION_ELIMINAR", proyectoIDParameter)
    End Function

    Public Overridable Function SP_Proyectos_EDICION_INSERTAR(nombreProyecto As String, codigoGenerado As String, descripcion As String) As Integer
        Dim nombreProyectoParameter As ObjectParameter = If(nombreProyecto IsNot Nothing, New ObjectParameter("NombreProyecto", nombreProyecto), New ObjectParameter("NombreProyecto", GetType(String)))

        Dim codigoGeneradoParameter As ObjectParameter = If(codigoGenerado IsNot Nothing, New ObjectParameter("CodigoGenerado", codigoGenerado), New ObjectParameter("CodigoGenerado", GetType(String)))

        Dim descripcionParameter As ObjectParameter = If(descripcion IsNot Nothing, New ObjectParameter("Descripcion", descripcion), New ObjectParameter("Descripcion", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Proyectos_EDICION_INSERTAR", nombreProyectoParameter, codigoGeneradoParameter, descripcionParameter)
    End Function

    Public Overridable Function SP_ProyectosYTecnologias_EDICION_INSERTAR(proyectoID As Nullable(Of Integer), tecnologiaID As Nullable(Of Integer), plantillaID As Nullable(Of Integer)) As Integer
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Dim tecnologiaIDParameter As ObjectParameter = If(tecnologiaID.HasValue, New ObjectParameter("TecnologiaID", tecnologiaID), New ObjectParameter("TecnologiaID", GetType(Integer)))

        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_ProyectosYTecnologias_EDICION_INSERTAR", proyectoIDParameter, tecnologiaIDParameter, plantillaIDParameter)
    End Function

    Public Overridable Function SP_RegistroValorRequerimientos_EDICION_INSERTAR(proyectoID As Nullable(Of Integer), requerimiento As String, valorRequerimiento As String) As Integer
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Dim requerimientoParameter As ObjectParameter = If(requerimiento IsNot Nothing, New ObjectParameter("Requerimiento", requerimiento), New ObjectParameter("Requerimiento", GetType(String)))

        Dim valorRequerimientoParameter As ObjectParameter = If(valorRequerimiento IsNot Nothing, New ObjectParameter("ValorRequerimiento", valorRequerimiento), New ObjectParameter("ValorRequerimiento", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_RegistroValorRequerimientos_EDICION_INSERTAR", proyectoIDParameter, requerimientoParameter, valorRequerimientoParameter)
    End Function

    Public Overridable Function SP_RegistroValorRequerimientos_SEGUN_ProyectoID(proyectoID As Nullable(Of Integer)) As ObjectResult(Of SP_RegistroValorRequerimientos_SEGUN_ProyectoID_Result)
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_RegistroValorRequerimientos_SEGUN_ProyectoID_Result)("SP_RegistroValorRequerimientos_SEGUN_ProyectoID", proyectoIDParameter)
    End Function

    Public Overridable Function SP_RegistroValorRequerimientos_SegunProyectoRequerimiento(proyectoID As Nullable(Of Integer), requerimiento As String) As ObjectResult(Of SP_RegistroValorRequerimientos_SegunProyectoRequerimiento_Result)
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Dim requerimientoParameter As ObjectParameter = If(requerimiento IsNot Nothing, New ObjectParameter("Requerimiento", requerimiento), New ObjectParameter("Requerimiento", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_RegistroValorRequerimientos_SegunProyectoRequerimiento_Result)("SP_RegistroValorRequerimientos_SegunProyectoRequerimiento", proyectoIDParameter, requerimientoParameter)
    End Function

    Public Overridable Function SP_RequerimientosPlantillas_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID(plantillaID As Nullable(Of Integer)) As ObjectResult(Of SP_RequerimientosPlantillas_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID_Result)
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_RequerimientosPlantillas_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID_Result)("SP_RequerimientosPlantillas_BUSQUEDA_SEGUN_PARAMETRO_PlantillaID", plantillaIDParameter)
    End Function

    Public Overridable Function SP_RequerimientosPlantillas_EDICION_ACTUALIZAR(requerimientoPlantillaID As Nullable(Of Integer), plantillaID As Nullable(Of Integer), enunciado As String, requerimiento As String, ordenDePeticion As Nullable(Of Integer)) As Integer
        Dim requerimientoPlantillaIDParameter As ObjectParameter = If(requerimientoPlantillaID.HasValue, New ObjectParameter("RequerimientoPlantillaID", requerimientoPlantillaID), New ObjectParameter("RequerimientoPlantillaID", GetType(Integer)))

        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Dim enunciadoParameter As ObjectParameter = If(enunciado IsNot Nothing, New ObjectParameter("Enunciado", enunciado), New ObjectParameter("Enunciado", GetType(String)))

        Dim requerimientoParameter As ObjectParameter = If(requerimiento IsNot Nothing, New ObjectParameter("Requerimiento", requerimiento), New ObjectParameter("Requerimiento", GetType(String)))

        Dim ordenDePeticionParameter As ObjectParameter = If(ordenDePeticion.HasValue, New ObjectParameter("OrdenDePeticion", ordenDePeticion), New ObjectParameter("OrdenDePeticion", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_RequerimientosPlantillas_EDICION_ACTUALIZAR", requerimientoPlantillaIDParameter, plantillaIDParameter, enunciadoParameter, requerimientoParameter, ordenDePeticionParameter)
    End Function

    Public Overridable Function SP_RequerimientosPlantillas_EDICION_ELIMINAR(requerimientoPlantillaID As Nullable(Of Integer)) As Integer
        Dim requerimientoPlantillaIDParameter As ObjectParameter = If(requerimientoPlantillaID.HasValue, New ObjectParameter("RequerimientoPlantillaID", requerimientoPlantillaID), New ObjectParameter("RequerimientoPlantillaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_RequerimientosPlantillas_EDICION_ELIMINAR", requerimientoPlantillaIDParameter)
    End Function

    Public Overridable Function SP_RequerimientosPlantillas_EDICION_INSERTAR(plantillaID As Nullable(Of Integer), enunciado As String, requerimiento As String, ordenDePeticion As Nullable(Of Integer)) As Integer
        Dim plantillaIDParameter As ObjectParameter = If(plantillaID.HasValue, New ObjectParameter("PlantillaID", plantillaID), New ObjectParameter("PlantillaID", GetType(Integer)))

        Dim enunciadoParameter As ObjectParameter = If(enunciado IsNot Nothing, New ObjectParameter("Enunciado", enunciado), New ObjectParameter("Enunciado", GetType(String)))

        Dim requerimientoParameter As ObjectParameter = If(requerimiento IsNot Nothing, New ObjectParameter("Requerimiento", requerimiento), New ObjectParameter("Requerimiento", GetType(String)))

        Dim ordenDePeticionParameter As ObjectParameter = If(ordenDePeticion.HasValue, New ObjectParameter("OrdenDePeticion", ordenDePeticion), New ObjectParameter("OrdenDePeticion", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_RequerimientosPlantillas_EDICION_INSERTAR", plantillaIDParameter, enunciadoParameter, requerimientoParameter, ordenDePeticionParameter)
    End Function

    Public Overridable Function SP_TablasDeProyecto_BUSQUEDA_SEGUN_PARAMETRO_ProyectoID(proyectoID As Nullable(Of Integer)) As ObjectResult(Of SP_TablasDeProyecto_BUSQUEDA_SEGUN_PARAMETRO_ProyectoID_Result)
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_TablasDeProyecto_BUSQUEDA_SEGUN_PARAMETRO_ProyectoID_Result)("SP_TablasDeProyecto_BUSQUEDA_SEGUN_PARAMETRO_ProyectoID", proyectoIDParameter)
    End Function

    Public Overridable Function SP_TablasDeProyecto_EDICION_ACTUALIZAR(tablaID As Nullable(Of Integer), proyectoID As Nullable(Of Integer), nombreTabla As String) As Integer
        Dim tablaIDParameter As ObjectParameter = If(tablaID.HasValue, New ObjectParameter("TablaID", tablaID), New ObjectParameter("TablaID", GetType(Integer)))

        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Dim nombreTablaParameter As ObjectParameter = If(nombreTabla IsNot Nothing, New ObjectParameter("NombreTabla", nombreTabla), New ObjectParameter("NombreTabla", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_TablasDeProyecto_EDICION_ACTUALIZAR", tablaIDParameter, proyectoIDParameter, nombreTablaParameter)
    End Function

    Public Overridable Function SP_TablasDeProyecto_EDICION_ELIMINAR(tablaID As Nullable(Of Integer)) As Integer
        Dim tablaIDParameter As ObjectParameter = If(tablaID.HasValue, New ObjectParameter("TablaID", tablaID), New ObjectParameter("TablaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_TablasDeProyecto_EDICION_ELIMINAR", tablaIDParameter)
    End Function

    Public Overridable Function SP_TablasDeProyecto_EDICION_INSERTAR(proyectoID As Nullable(Of Integer), nombreTabla As String) As Integer
        Dim proyectoIDParameter As ObjectParameter = If(proyectoID.HasValue, New ObjectParameter("ProyectoID", proyectoID), New ObjectParameter("ProyectoID", GetType(Integer)))

        Dim nombreTablaParameter As ObjectParameter = If(nombreTabla IsNot Nothing, New ObjectParameter("NombreTabla", nombreTabla), New ObjectParameter("NombreTabla", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_TablasDeProyecto_EDICION_INSERTAR", proyectoIDParameter, nombreTablaParameter)
    End Function

    Public Overridable Function SP_Tecnologias_EDICION_ACTUALIZAR(tecnologiaID As Nullable(Of Integer), nombreTecnologia As String) As Integer
        Dim tecnologiaIDParameter As ObjectParameter = If(tecnologiaID.HasValue, New ObjectParameter("TecnologiaID", tecnologiaID), New ObjectParameter("TecnologiaID", GetType(Integer)))

        Dim nombreTecnologiaParameter As ObjectParameter = If(nombreTecnologia IsNot Nothing, New ObjectParameter("NombreTecnologia", nombreTecnologia), New ObjectParameter("NombreTecnologia", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Tecnologias_EDICION_ACTUALIZAR", tecnologiaIDParameter, nombreTecnologiaParameter)
    End Function

    Public Overridable Function SP_Tecnologias_EDICION_ELIMINAR(tecnologiaID As Nullable(Of Integer)) As Integer
        Dim tecnologiaIDParameter As ObjectParameter = If(tecnologiaID.HasValue, New ObjectParameter("TecnologiaID", tecnologiaID), New ObjectParameter("TecnologiaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Tecnologias_EDICION_ELIMINAR", tecnologiaIDParameter)
    End Function

    Public Overridable Function SP_Tecnologias_EDICION_INSERTAR(nombreTecnologia As String) As Integer
        Dim nombreTecnologiaParameter As ObjectParameter = If(nombreTecnologia IsNot Nothing, New ObjectParameter("NombreTecnologia", nombreTecnologia), New ObjectParameter("NombreTecnologia", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Tecnologias_EDICION_INSERTAR", nombreTecnologiaParameter)
    End Function

    Public Overridable Function SP_TiposDeCampos_BUSQUEDA_SEGUN_PARAMETRO_GrupoTiposID(grupoTiposID As Nullable(Of Integer)) As ObjectResult(Of SP_TiposDeCampos_BUSQUEDA_SEGUN_PARAMETRO_GrupoTiposID_Result)
        Dim grupoTiposIDParameter As ObjectParameter = If(grupoTiposID.HasValue, New ObjectParameter("GrupoTiposID", grupoTiposID), New ObjectParameter("GrupoTiposID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_TiposDeCampos_BUSQUEDA_SEGUN_PARAMETRO_GrupoTiposID_Result)("SP_TiposDeCampos_BUSQUEDA_SEGUN_PARAMETRO_GrupoTiposID", grupoTiposIDParameter)
    End Function

    Public Overridable Function SP_TiposDeCampos_EDICION_ACTUALIZAR(tipoCampoID As Nullable(Of Integer), grupoTiposID As Nullable(Of Integer), nombreTipo As String) As Integer
        Dim tipoCampoIDParameter As ObjectParameter = If(tipoCampoID.HasValue, New ObjectParameter("TipoCampoID", tipoCampoID), New ObjectParameter("TipoCampoID", GetType(Integer)))

        Dim grupoTiposIDParameter As ObjectParameter = If(grupoTiposID.HasValue, New ObjectParameter("GrupoTiposID", grupoTiposID), New ObjectParameter("GrupoTiposID", GetType(Integer)))

        Dim nombreTipoParameter As ObjectParameter = If(nombreTipo IsNot Nothing, New ObjectParameter("NombreTipo", nombreTipo), New ObjectParameter("NombreTipo", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_TiposDeCampos_EDICION_ACTUALIZAR", tipoCampoIDParameter, grupoTiposIDParameter, nombreTipoParameter)
    End Function

    Public Overridable Function SP_TiposDeCampos_EDICION_ELIMINAR(tipoCampoID As Nullable(Of Integer)) As Integer
        Dim tipoCampoIDParameter As ObjectParameter = If(tipoCampoID.HasValue, New ObjectParameter("TipoCampoID", tipoCampoID), New ObjectParameter("TipoCampoID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_TiposDeCampos_EDICION_ELIMINAR", tipoCampoIDParameter)
    End Function

    Public Overridable Function SP_TiposDeCampos_EDICION_INSERTAR(grupoTiposID As Nullable(Of Integer), nombreTipo As String) As Integer
        Dim grupoTiposIDParameter As ObjectParameter = If(grupoTiposID.HasValue, New ObjectParameter("GrupoTiposID", grupoTiposID), New ObjectParameter("GrupoTiposID", GetType(Integer)))

        Dim nombreTipoParameter As ObjectParameter = If(nombreTipo IsNot Nothing, New ObjectParameter("NombreTipo", nombreTipo), New ObjectParameter("NombreTipo", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_TiposDeCampos_EDICION_INSERTAR", grupoTiposIDParameter, nombreTipoParameter)
    End Function

    Public Overridable Function TruncateReplace() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("TruncateReplace")
    End Function

End Class
